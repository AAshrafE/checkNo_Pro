CREATE PROCEDURE [ssmp].[vendNoProductCheck] (@SK_AUD_INSERT int)
AS
BEGIN

	SET DATEFIRST 1;

	DECLARE @feature VARCHAR(40) = 'NO_PRODUCT_CHECK';
	DECLARE @yesterday INT = CAST(FORMAT( GETDATE() - 1, 'yyyyMMdd') AS INT); 
	DECLARE @current_weekday INT = DATEPART(weekday,GETDATE()); --1
	DECLARE @is_first_day BIT;

	-- Check if today is the first day of the month
	SET @is_first_day = CASE 
		WHEN DAY(GETDATE()) = 1 THEN 1
		ELSE 0
	END;

BEGIN TRY
	BEGIN TRANSACTION

	DELETE FROM dbo.FCT_SMART_SAMPLING_VEND_NO_PRODUCT_SNAPSHOT
	WHERE      SK_DATE = @yesterday;

	DROP TABLE IF EXISTS #TEMP_OVERRULE;
	DROP TABLE IF EXISTS #SS;
	DROP TABLE IF EXISTS #SS_II;

	IF @is_first_day <> 1
	BEGIN


		SELECT
			 @yesterday														AS [SK_DATE]
			,SK_SUPPLIER													AS [SK_SUPPLIER]
			,CAST('VENDOR' AS NVARCHAR(50))									AS [ENTITY]
			,COD_BOB_SELLER_ID												AS [ENTITY_ID]
			, CAST('vendNoProductCheck' AS NVARCHAR(250))					AS [METRIC]
			,CASE WHEN DSC_VALUE = 'Active' THEN 1
				WHEN DSC_VALUE = 'Inactive' THEN 0
				END															AS [METRIC_VALUE]
			,CASE WHEN VALUE_OVERRULE >= 0 THEN 1 ELSE 0 END				AS FLG_OVERRULE								
			,@SK_AUD_INSERT													AS [SK_AUD_INSERT]
		INTO #SS
		FROM (
			SELECT
			aux.COD_BOB_SELLER_ID
			,aux.DSC_VALUE
			,aux.SK_START_DATE
			,max_date = MAX(SK_START_DATE) OVER (PARTITION BY aux.COD_COUNTRY, aux.COD_BOB_SELLER_ID, aux.COD_SHORT_CODE)
			,CASE WHEN DSC_VALUE = 'Active' THEN 1
				WHEN DSC_VALUE = 'Inactive' THEN 0
				WHEN DSC_VALUE = 'Default' THEN -1
				END AS VALUE_OVERRULE
			,SK_SUPPLIER AS SK_SUPPLIER
			FROM [dbo].[AUX_TOOLS_VIEWS_SELLER_FEATURE] aux
			inner join dbo.DIM_SUPPLIER DS --NEW
			on aux.COD_BOB_SELLER_ID = ds.COD_SUPPLIER_BOB AND DS.DSC_TAX_CLASS = 'international'
			WHERE 1=1
				AND DSC_FEATURE = @feature 
				AND ( SK_END_DATE IS NULL OR  SK_END_DATE >= @yesterday )
				AND FLG_IS_DELETED = 0
				AND SK_START_DATE = @yesterday
				AND DSC_VALUE <> 'Default'
		) tsf
		WHERE SK_START_DATE = max_date;

			INSERT INTO [dbo].[FCT_SMART_SAMPLING_INDICATORS] WITH (TABLOCK)
			   (
				 [ENTITY]
			   , [ENTITY_ID]
			   , [METRIC]
			   , [METRIC_VALUE]
			   , SK_AUD_INSERT
			   )
			SELECT 
				 [ENTITY]
			   , [ENTITY_ID]
			   , [METRIC]
			   , [METRIC_VALUE]
			   , SK_AUD_INSERT
			FROM #SS

			INSERT INTO [dbo].[FCT_SMART_SAMPLING_VEND_NO_PRODUCT_SNAPSHOT] WITH (TABLOCK)
			   (
					 [SK_DATE]
					,[SK_SUPPLIER]
					,[ENTITY]
					,[ENTITY_ID]
					,[METRIC]
					,[METRIC_VALUE]
					,[FLG_OVERRULE]
					,[SK_AUD_INSERT]
			   )
			SELECT
					 [SK_DATE]
					,[SK_SUPPLIER]
					,[ENTITY]
					,[ENTITY_ID]
					,[METRIC]
					,[METRIC_VALUE]
					,[FLG_OVERRULE]
					,[SK_AUD_INSERT]
			FROM #SS FCT

	END
ELSE 
	BEGIN

	DROP TABLE IF EXISTS #TEMP_OVERRULE;
	SELECT
		 COD_COUNTRY
		,COD_BOB_SELLER_ID
		,COD_SHORT_CODE
		,SK_START_DATE
		,CASE WHEN DSC_VALUE = 'Active' THEN 1
			WHEN DSC_VALUE = 'Inactive' THEN 0
			WHEN DSC_VALUE = 'Default' THEN -1
			END AS VALUE_OVERRULE
	INTO #TEMP_OVERRULE
	FROM (
		SELECT
		aux.COD_BOB_SELLER_ID
		,aux.DSC_VALUE
		,aux.SK_START_DATE
		,aux.COD_COUNTRY
		,aux.COD_SHORT_CODE
		, max_date = MAX(SK_START_DATE) OVER (PARTITION BY COD_COUNTRY, COD_BOB_SELLER_ID, COD_SHORT_CODE)
		FROM [dbo].[AUX_TOOLS_VIEWS_SELLER_FEATURE] aux
		WHERE 1=1
			AND DSC_FEATURE = @feature 
			AND ( SK_END_DATE IS NULL OR  SK_END_DATE >= @yesterday )
			AND FLG_IS_DELETED = 0
	) tsf
	WHERE SK_START_DATE = max_date;


	DROP TABLE IF EXISTS #TEMP_QC;
	SELECT X.SK_SALES_ORDER_ITEM
			,X.SK_QC_REASON
			,X.DSC_RESPONSIBLE
			,X.RN
	INTO #TEMP_QC
	FROM
	(
		SELECT RQC.SK_SALES_ORDER_ITEM,
			   RQC.SK_QC_REASON,
	   RQC.DSC_RESPONSIBLE,
			   ROW_NUMBER() OVER(PARTITION BY RQC.SK_SALES_ORDER_ITEM
			   ORDER BY RQC.SK_DATE ASC,
						RQC.SK_TIME ASC) AS RN -- ordering in ascending to capture only the CR aftersale QC
		FROM DBO.FCT_REVERSE_QC_RESULT AS RQC
			 INNER JOIN DBO.FCT_RMA_RETURN_ORDER_ITEM AS RROI ON RROI.SK_SALES_ORDER_ITEM = RQC.SK_SALES_ORDER_ITEM
			 JOIN DBO.DIM_SYSTEM AS SY ON SY.SK_SYSTEM = RQC.SK_SYSTEM
		WHERE SY.COD_SYSTEM = 'wmt'
		AND RQC.DSC_RESPONSIBLE = 'Vendor' -- PTBI-14302

	) AS X
	WHERE X.RN = 1;

	DROP TABLE IF EXISTS #TEMP_THRESHOLD;
	WITH TOOLS_PARAMETERS
	AS (
	 SELECT PKPI.COD_GROUP,
			PKPI.COD_CODE AS P_COD_CODE,
			SKPI.MTR_THRESHOLD AS MTR_THRESHOLD,
			SKPI.DAT_START_DATE,
			LEAD(DATEADD(DAY, -1, SKPI.DAT_START_DATE), 1, '99991231') OVER(PARTITION BY PKPI.COD_GROUP, PKPI.COD_CODE ORDER BY SKPI.DAT_START_DATE) DAT_END_DATE
	  FROM [AIG_JUMIA_UG_STG].DBO.PRE_TOOLS_SINGLE_KPI AS SKPI
	  JOIN [AIG_JUMIA_UG_STG].DBO.PRE_TOOLS_KPI AS PKPI ON PKPI.ID = SKPI.COD_KPI_PARENT AND PKPI.FLG_IS_DELETED = 0
	 WHERE PKPI.COD_TYPE = 'SINGLE'
		-- NOT DELETED
	   AND SKPI.FLG_IS_DELETED = 0
		-- GROUP
	   AND PKPI.COD_GROUP IN ('QC_RULES', 'JG_QC_RULES')
	    ),
	  TP
	  AS (
	   SELECT COD_GROUP, P_COD_CODE, MTR_THRESHOLD
		 FROM TOOLS_PARAMETERS AS TP
		WHERE DATEADD(DAY, -0, GETDATE()) BETWEEN TP.DAT_START_DATE AND TP.DAT_END_DATE)
	
	SELECT *
	  INTO #TEMP_THRESHOLD
	  fROM TP
	 PIVOT (
	        MAX(MTR_THRESHOLD) FOR P_COD_CODE in (Age, Delivered_Orders, QRR)
	       ) THRESHOLD
	;
             

	--PTBI-14028
	DROP TABLE IF EXISTS #OVERRIDE_SMART_SAMPLING
	SELECT SKPI.MTR_OVERRIDE_VALUE, DS.COD_SUPPLIER_BOB, DD.SK_DATE, PKPI.COD_CODE 
	INTO #OVERRIDE_SMART_SAMPLING
	FROM    [AIG_JUMIA_UG_STG].DBO.PRE_TOOLS_SELLER_OVERRIDE SKPI
			JOIN [AIG_JUMIA_UG_STG].DBO.PRE_TOOLS_KPI AS PKPI ON PKPI.ID = SKPI.COD_FK_KPI_PARENT 
			JOIN DBO.DIM_DATE DD ON DD.DATE = SKPI.DAT_START_DATE
			JOIN DBO.DIM_SUPPLIER DS ON DS.COD_SUPPLIER_BOB = SKPI.COD_SRC_ID AND DS.DSC_TAX_CLASS = 'international'
	WHERE PKPI.FLG_IS_DELETED = 0 AND SKPI.DSC_CODE = 'PG' AND SKPI.FLG_IS_DELETED = 0
		AND PKPI.COD_TYPE = 'OVERRIDE'
		AND PKPI.COD_CODE IN ('NR_RETURN_ITEM','NR_CANCEL_ITEM');



	DECLARE @LAST_SUNDAY BIGINT = CONVERT(INT, CONVERT(VARCHAR(10), CAST(DATEADD(wk, DATEDIFF(wk, 6, GETDATE()-7), 6) AS DATE), 112)) ;
	DECLARE @LAST_MONDAY_2WEEKS_AGO BIGINT = CONVERT(INT, CONVERT(VARCHAR(10), CAST(DATEADD(wk, DATEDIFF(wk, 6, GETDATE()-6), 0) AS DATE), 112));
	DECLARE @LAST_MONDAY_4WEEKS_AGO BIGINT = CONVERT(INT, CONVERT(VARCHAR(10), CAST(DATEADD(wk, DATEDIFF(wk, 6, GETDATE()-28), 0) AS DATE), 112));
	DECLARE @LAST_MONDAY_8WEEKS_AGO BIGINT = CONVERT(INT, CONVERT(VARCHAR(10), CAST(DATEADD(wk, DATEDIFF(wk, 6, GETDATE()-56), 0) AS DATE), 112));
		--print @LAST_SUNDAY 
		--print @LAST_MONDAY_2WEEKS_AGO 
		--print @LAST_MONDAY_4WEEKS_AGO 
		--print @LAST_MONDAY_8WEEKS_AGO               	


	DROP TABLE IF EXISTS #SALES_DATA_AUX
	SELECT 
		DS.COD_SUPPLIER_BOB,
			SUM(CASE WHEN SOIS.SK_DELIVERED_DATE BETWEEN @LAST_MONDAY_2WEEKS_AGO AND @LAST_SUNDAY THEN 1.0 ELSE 0 END) AS SOI_DELIVERED_15_8_D,
			SUM(CASE WHEN SOIS.SK_DELIVERED_DATE BETWEEN @LAST_MONDAY_4WEEKS_AGO AND @LAST_SUNDAY AND SOIS.SK_RETURNED_FINAL_DATE > 10 AND REA_AFTER_SALE.SK_REASON IS NOT NULL 
														AND (
															(REA_AFTER_SALE.COD_REASON_PREFIX IN('AS18', 'AS19', 'AS21', 'AS22', 'AS23', 'AS24', 'AS25', 'AS35', 'AS36', 'CA27', 'CA28', 'CA29', 'CA30', 'CA32', 'CA33', 'CA34', 'CR12', 'CR13', 'CR15', 'CR16', 'CR17', 'CR18', 'CR29', 'CR30', 'IP11', 'NS10', 'NS11', 'NS13', 'NS14', 'NS15', 'NS16', 'NS17', 'NS18', 'NS20', 'NS25', 'NS26', 'RJ05', 'RJ11', 'RJ15', 'RJ16', 'RJ17', 'RJ18', 'RJ20', 'RJ21', 'RJ22', 'RJ23', 'RJ26', 'RJ27', 'RJ28', 'RJ32', 'RJ33', 'RJ34', 'RJ36', 'RJ37', 'RJ38', 'RJ41', 'RQ03', 'RQ04', 'RQ08', 'RQ11', 'RQ14', 'RQ15', 'RQ16', 'RQ17', 'RQ20', 'RS15', 'RS16', 'RS17', 'RS18', 'RS20', 'RS21', 'RS22', 'RS23', 'RS26', 'RS30', 'CA38', 'CA38D', 'CA41D', 'IP05D', 'IP07D', 'IP10D', 'IP11D', 'IP12D', 'IP13', 'IP13D', 'IP14D', 'NA10D', 'RS38', 'RS27D', 'CR24', 'CA49', 'RJ06')
															AND SHIP.DSC_SHIPPING_TYPE_DESCRIPTION <> 'Warehouse')
															OR REA_AFTER_SALE.COD_REASON_PREFIX IN('AS12', 'AS13', 'AS14', 'AS16', 'AS17', 'AS20', 'CA31', 'CR06', 'CR07', 'CR08', 'CR10', 'CR11', 'CR14', 'IP10', 'NS04', 'NS05', 'NS06', 'NS08', 'NS09', 'NS12', 'RJ19', 'RQ18', 'RS19', 'IP09D', 'NA09D', 'AS15', 'CR09', 'NS07')
														 ) THEN 1.0 ELSE 0 END)  AS SOI_RETURNED_36D,
			SUM(CASE WHEN SOIS.SK_DELIVERED_DATE BETWEEN @LAST_MONDAY_4WEEKS_AGO AND @LAST_SUNDAY THEN 1.0 ELSE 0 END) AS SOI_DELIVERED_36_8_D
		INTO #SALES_DATA_AUX 
		FROM DBO.FCT_SALES_ORDER_ITEM_MARKETING AS SOIS 
		INNER JOIN DBO.DIM_SUPPLIER DS ON SOIS.SK_SUPPLIER = DS.SK_SUPPLIER AND DS.DSC_TAX_CLASS = 'international'
		INNER JOIN DBO.V_D25_DIM_SHIPPING_TYPE AS SHIP ON SHIP.SK_SHIPPING_TYPE = SOIS.SK_SHIPPING_TYPE
		LEFT JOIN DBO.DIM_REASON AS REA ON SOIS.SK_REASON = REA.SK_REASON AND REA.DSC_REASON_NAME IN('MER_1_-_Out_of_stock', 'MER_2_-_Quality_-_Item_Failed_QC') 
				AND SHIP.DSC_SHIPPING_TYPE_DESCRIPTION <> 'Warehouse'
		LEFT JOIN #TEMP_QC AS AFTERSALE ON SOIS.SK_SALES_ORDER_ITEM = AFTERSALE.SK_SALES_ORDER_ITEM
		LEFT JOIN DBO.DIM_REASON AS REA_AFTER_SALE ON AFTERSALE.SK_QC_REASON = REA_AFTER_SALE.SK_REASON
																				   AND REA_AFTER_SALE.COD_REASON_PREFIX IN('AS12', 'AS13', 'AS14', 'AS16', 'AS17', 'AS18', 'AS19', 'AS20', 'AS21', 'AS22', 'AS23', 'AS24', 'AS25', 'AS35', 'AS36', 'CA27', 'CA28', 'CA29', 'CA30', 'CA31', 'CA32', 'CA33', 'CA34', 'CR06', 'CR07', 'CR08', 'CR10', 'CR11', 'CR12', 'CR13', 'CR14', 'CR15', 'CR16', 'CR17', 'CR18', 'CR29', 'CR30', 'IP10', 'IP11', 'NS04', 'NS05', 'NS06', 'NS08', 'NS09', 'NS10', 'NS11', 'NS12', 'NS13', 'NS14', 'NS15', 'NS16', 'NS17', 'NS18', 'NS20', 'NS25', 'NS26', 'RJ05', 'RJ11', 'RJ15', 'RJ16', 'RJ17', 'RJ18', 'RJ19', 'RJ20', 'RJ21', 'RJ22', 'RJ23', 'RJ26', 'RJ27', 'RJ28', 'RJ32', 'RJ33', 'RJ34', 'RJ36', 'RJ37', 'RJ38', 'RJ41', 'RQ03', 'RQ04', 'RQ08', 'RQ11', 'RQ14', 'RQ15', 'RQ16', 'RQ17', 'RQ18', 'RQ20', 'RS15', 'RS16', 'RS17', 'RS18', 'RS19', 'RS20', 'RS21', 'RS22', 'RS23', 'RS26', 'RS30', 'CA38', 'CA38D', 'CA41D', 'IP05D', 'IP07D', 'IP09D', 'IP10D', 'IP11D', 'IP12D', 'IP13', 'IP13D', 'IP14D', 'NA09D', 'NA10D', 'RS38', 'RS27D', 'CR24', 'AS15', 'CR09', 'NS07', 'CA49', 'RJ06')    
		GROUP BY DS.COD_SUPPLIER_BOB

		DROP TABLE IF EXISTS #SALES_DATA
		SELECT
			SDX.COD_SUPPLIER_BOB,
			ROUND((CASE WHEN SDX.SOI_RETURNED_36D < ISNULL(OVERRIDE_RETURN_ITEMS.RETURNED_36D,0) THEN 0 ELSE SDX.SOI_RETURNED_36D - ISNULL(OVERRIDE_RETURN_ITEMS.RETURNED_36D,0) END / NULLIF(SDX.SOI_DELIVERED_36_8_D, 0)) * 100, 2, 1) AS L28D_QUALITY_RETURN_RATE 
		INTO #SALES_DATA 
		FROM #SALES_DATA_AUX SDX
			OUTER APPLY(
					SELECT 
						SUM(CASE WHEN OSS.SK_DATE BETWEEN @LAST_MONDAY_2WEEKS_AGO AND @LAST_SUNDAY THEN OSS.MTR_OVERRIDE_VALUE ELSE 0 END) CANCELLED_15D,
						SUM(CASE WHEN OSS.SK_DATE BETWEEN @LAST_MONDAY_4WEEKS_AGO AND @LAST_SUNDAY THEN OSS.MTR_OVERRIDE_VALUE ELSE 0 END) CANCELLED_36D
					FROM #OVERRIDE_SMART_SAMPLING OSS 
					WHERE OSS.COD_SUPPLIER_BOB = SDX.COD_SUPPLIER_BOB AND OSS.COD_CODE = 'Nr_Cancel_Item'
			) AS OVERRIDE_CANCELED_ITEMS
			OUTER APPLY(
					SELECT 
						SUM(CASE WHEN OSS.SK_DATE BETWEEN @LAST_MONDAY_2WEEKS_AGO AND @LAST_SUNDAY THEN OSS.MTR_OVERRIDE_VALUE ELSE 0 END) RETURNED_15D,
						SUM(CASE WHEN OSS.SK_DATE BETWEEN @LAST_MONDAY_4WEEKS_AGO AND @LAST_SUNDAY THEN OSS.MTR_OVERRIDE_VALUE ELSE 0 END) RETURNED_36D                    
					FROM #OVERRIDE_SMART_SAMPLING OSS 
					WHERE OSS.COD_SUPPLIER_BOB = SDX.COD_SUPPLIER_BOB AND OSS.COD_CODE = 'Nr_Return_Item'
			) AS OVERRIDE_RETURN_ITEMS



	DROP TABLE IF EXISTS #SS_II
	SELECT 
		 @yesterday															AS [SK_DATE]
		,SK_SUPPLIER														AS [SK_SUPPLIER]
		,CAST('VENDOR' AS NVARCHAR(50))										AS [ENTITY]
		, COD_SUPPLIER_BOB													AS [ENTITY_ID]
		, CAST('vendNoProductCheck' AS NVARCHAR(250))						AS [METRIC]
		,CASE 
			WHEN (VALUE_OVERRULE IS NULL OR VALUE_OVERRULE = -1)
			THEN ( CASE 
				WHEN A.AGE >= TT.Age
					AND A.NR_DELIVERED_ORDERS_L4W >= TT.Delivered_Orders
					AND A.QRR_L4W < TT.QRR
				THEN 1 ELSE 0 END) 
			ELSE VALUE_OVERRULE END											AS [METRIC_VALUE]
		, A.AGE															    AS [MTR_AGE]
		, NR_DELIVERED_ORDERS_L4W											AS [MTR_NR_DELIVERED_ORDERS_L4W]
		, QRR_L4W															AS [MTR_QRR_L4W]
		, FLG_OVERRULE														AS [FLG_OVERRULE]
		, @SK_AUD_INSERT													AS [SK_AUD_INSERT]

	INTO #SS_II
	FROM
	(
	SELECT 
	   DS.COD_SUPPLIER_BOB
	  ,DS.COD_SHORT_CODE
	  ,DS.DSC_SUPPLIER_NAME
	  ,DS.DSC_TAX_CLASS
	  ,DATEDIFF(day, DAT_CREATED_AT_BOB, GETDATE()) AS AGE
	  ,COUNT(DISTINCT CASE WHEN SOI.SK_DELIVERED_DATE BETWEEN  @LAST_MONDAY_4WEEKS_AGO AND  @LAST_SUNDAY THEN SK_SALES_ORDER ELSE NULL END) AS NR_DELIVERED_ORDERS_L4W
	  ,ISNULL(L28D_QUALITY_RETURN_RATE/100,0) AS QRR_L4W
	  ,ov.VALUE_OVERRULE
	  ,format(getdate(),'yyyyMMdd') as SK_DATE --new
	  ,DS.SK_SUPPLIER -- NEW
      ,CASE WHEN VALUE_OVERRULE >= 0 THEN 1 ELSE 0 END AS FLG_OVERRULE --NEW

	FROM dbo.DIM_SUPPLIER DS
	LEFT JOIN #TEMP_OVERRULE ov ON ov.COD_BOB_SELLER_ID = ds.COD_SUPPLIER_BOB
	LEFT JOIN dbo.FCT_SALES_ORDER_ITEM_MARKETING AS SOI ON DS.SK_SUPPLIER = SOI.SK_SUPPLIER
	LEFT JOIN dbo.DIM_SHIPPING_TYPE sty on SOI.SK_SHIPPING_TYPE = sty.SK_SHIPPING_TYPE
	LEFT JOIN #TEMP_QC AS QC ON SOI.SK_SALES_ORDER_ITEM = qc.SK_SALES_ORDER_ITEM 
	LEFT JOIN dbo.DIM_REASON rs ON rs.sk_reason = qc.SK_QC_REASON -- change from V_D100_DIM_REASON
	LEFT JOIN #SALES_DATA AS SD ON SD.COD_SUPPLIER_BOB=DS.COD_SUPPLIER_BOB

	WHERE 1=1
		and SOI.SK_DELIVERED_DATE >= @LAST_MONDAY_8WEEKS_AGO --20220101
		AND sty.DSC_SHIPPING_TYPE_DESCRIPTION LIKE 'DROP%SHIPPING'
		AND DS.DSC_TAX_CLASS = 'international'

	GROUP BY 
		ds.COD_SUPPLIER_BOB
		,ds.COD_SHORT_CODE
		,DSC_SUPPLIER_NAME
		,DS.DSC_TAX_CLASS
		,DATEDIFF(day, DAT_CREATED_AT_BOB, GETDATE())
		,ov.VALUE_OVERRULE
		,ds.SK_SUPPLIER --new
		,L28D_QUALITY_RETURN_RATE --new_one
	) A
	LEFT JOIN #TEMP_THRESHOLD TT ON TT.COD_GROUP = CASE A.DSC_TAX_CLASS
														WHEN 'international' THEN 'JG_QC_RULES'
														ELSE 'QC_RULES'
												   END
	;

			INSERT INTO [dbo].[FCT_SMART_SAMPLING_INDICATORS] WITH (TABLOCK)
			   (
				 [ENTITY]
			   , [ENTITY_ID]
			   , [METRIC]
			   , [METRIC_VALUE]
			   , SK_AUD_INSERT
			   )
		   SELECT 
				 [ENTITY]
			   , [ENTITY_ID]
			   , [METRIC]
			   , [METRIC_VALUE]
			   , SK_AUD_INSERT
		   FROM #SS_II


	   		INSERT INTO [dbo].[FCT_SMART_SAMPLING_VEND_NO_PRODUCT_SNAPSHOT] WITH (TABLOCK)
           (
		         [SK_DATE]
				,[SK_SUPPLIER]
				,[ENTITY]
				,[ENTITY_ID]
				,[METRIC]
				,[METRIC_VALUE]
				,[MTR_AGE]
				,[MTR_NR_DELIVERED_ORDERS_L4W]
				,[MTR_QRR_L4W]
				,[FLG_OVERRULE]
				,[SK_AUD_INSERT]
		   )
		SELECT
	             [SK_DATE]
				,[SK_SUPPLIER]
				,[ENTITY]
				,[ENTITY_ID]
				,[METRIC]
				,[METRIC_VALUE]
				,[MTR_AGE]
				,[MTR_NR_DELIVERED_ORDERS_L4W]
				,[MTR_QRR_L4W]
				,[FLG_OVERRULE]
				,[SK_AUD_INSERT]
		FROM #SS_II FCT
END


-- SLIDING WINDOW: 6MONTHS
DECLARE @GET_DATE DATE = GETDATE() - 1 
DECLARE @SNAPSHOT INT = (SELECT format(dateadd(month,-6,@GET_DATE),'yyyyMMdd'))
PRINT @SNAPSHOT

	DELETE FCT
	FROM [dbo].[FCT_SMART_SAMPLING_VEND_NO_PRODUCT_SNAPSHOT] FCT
	WHERE SK_DATE < @SNAPSHOT


DROP TABLE IF EXISTS #TEMP_OVERRULE;
DROP TABLE IF EXISTS #SS;
DROP TABLE IF EXISTS #SS_II;
DROP TABLE IF EXISTS #to_delete

COMMIT TRANSACTION
END TRY

	BEGIN CATCH
		-- TRANSACTION
		ROLLBACK TRANSACTION
		-- ERROR
		DECLARE @ERROR NVARCHAR(MAX) = ERROR_MESSAGE();
		RAISERROR(@ERROR, 15, 1);
	END CATCH

END
